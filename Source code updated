import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter.ttk import Button, Label, Style
import pandas as pd
from datetime import datetime
import pytz
from PIL import Image, ImageDraw, ImageFont
import os

# Function to get the font file path dynamically
def get_font_path():
    # Look for the font file in the same directory as the script or in a 'resources' subfolder
    base_dir = os.path.dirname(os.path.abspath(__file__))
    font_path = os.path.join(base_dir, "DejaVuSans-Bold.ttf")
    if not os.path.exists(font_path):
        font_path = os.path.join(base_dir, "resources", "DejaVuSans-Bold.ttf")
    if not os.path.exists(font_path):
        # If the font file is not found, return None to indicate a fallback is needed
        return None
    return font_path

# Function to process the uploaded file
def process_file():
    file_path = filedialog.askopenfilename(
        filetypes=[("Excel Files", "*.xlsx"), ("All Files", "*.*")]
    )
    if not file_path:
        messagebox.showerror("Error", "No file selected. Please upload an Excel file.")
        return

    try:
        output_files = generate_order_report(file_path)
        messagebox.showinfo("Success", f"Reports generated successfully: {', '.join(output_files)}")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {str(e)}")

# Function to generate reports
def generate_order_report(file_path):
    data = pd.read_excel(file_path)

    # Get today's date (Sri Lanka timezone)
    sri_lanka_tz = pytz.timezone("Asia/Colombo")
    today = datetime.now(sri_lanka_tz).strftime("%d.%m.%Y")  # DD.MM.YYYY format

    # Parse and filter the 'Required Date' column
    try:
        data.iloc[:, 11] = pd.to_datetime(data.iloc[:, 11], format="%m/%d/%Y", errors="coerce").dt.strftime("%m/%d/%Y")
    except Exception as e:
        raise ValueError("Could not parse the 'Required Date' column. Ensure all values are in MM/DD/YYYY format.")

    if today not in data.iloc[:, 11].unique():
        raise ValueError("No data found for today's date. Ensure the file has at least one row with today's date.")

    # Filter data for today's date
    today_data = data[data.iloc[:, 11] == today]

    # Process orders for each restaurant
    restaurants = today_data.iloc[:, 7].unique()

    # Create a new folder for today's reports on the desktop
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    folder_name = f"Order Reports {today}"
    reports_folder = os.path.join(desktop_path, folder_name)
    os.makedirs(reports_folder, exist_ok=True)

    output_files = []

    for restaurant in restaurants:
        restaurant_data = today_data[today_data.iloc[:, 7] == restaurant]

        # Choose the correct menu column
        menu_column = 8 if restaurant == "Acropol" else 9

        # Count food items
        food_counts = restaurant_data.iloc[:, menu_column].value_counts().reset_index()
        food_counts.columns = ["Menu", "Count"]

        # Add grand total
        food_counts.loc[len(food_counts)] = ["Grand Total", food_counts["Count"].sum()]

        # Save to JPEG
        output_file = os.path.join(reports_folder, f"{restaurant}_Orders_{today.replace('.', '-')}.jpeg")
        save_to_image(food_counts, output_file, restaurant, today)
        output_files.append(output_file)

    return output_files

# Updated function to save the data to a JPEG file
def save_to_image(dataframe, output_path, restaurant_name, today):
    font_path = get_font_path()
    font_size = 18

    if font_path:
        font = ImageFont.truetype(font_path, font_size)
    else:
        font = ImageFont.load_default()  # Fallback to the default system font if custom font is not found

    row_height = 30
    col_width = 400  # Increased distance between columns
    padding = 20

    # Create image canvas
    image_width = col_width * len(dataframe.columns)
    image_height = row_height * (len(dataframe) + 3) + padding * 2
    img = Image.new("RGB", (image_width, image_height), color="white")
    draw = ImageDraw.Draw(img)

    # Add header
    header_text = f"{restaurant_name} Orders - {today}"
    draw.text((padding, padding), header_text, fill="black", font=font)

    # Draw table headers
    y_offset = row_height + padding
    for col_idx, col_name in enumerate(dataframe.columns):
        x_offset = col_idx * col_width
        draw.text((x_offset + padding, y_offset), col_name, fill="black", font=font)

    # Draw table rows
    y_offset += row_height
    for _, row in dataframe.iterrows():
        for col_idx, value in enumerate(row):
            x_offset = col_idx * col_width
            draw.text((x_offset + padding, y_offset), str(value), fill="black", font=font)
        y_offset += row_height

    # Save the image
    img.save(output_path)

# GUI with Tkinter
def create_gui():
    root = tk.Tk()
    root.title("Food Order Report Generator")
    root.geometry("500x300")
    root.configure(bg="#FFA500")  # Orange hue

    # Style configuration
    style = Style()
    style.configure("TLabel", font=("Helvetica", 14), background="#FFA500", foreground="white")
    style.configure("TButton", font=("Helvetica", 12), background="#FFB347")

    # Header Label
    header = Label(root, text="Food Order Report Generator", style="TLabel")
    header.pack(pady=20)

    # Instructions Label
    instructions = Label(root, text="Upload your Excel file to generate reports", style="TLabel")
    instructions.pack(pady=10)

    # Upload Button
    upload_button = Button(root, text="Upload", command=process_file)
    upload_button.pack(pady=20)

    # Footer
    footer = Label(root, text="Powered by Tkinter", style="TLabel", font=("Helvetica", 10))
    footer.pack(side=tk.BOTTOM, pady=10)

    root.mainloop()

# Run the GUI
if __name__ == "__main__":
    create_gui()
