import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter.ttk import Button, Label, Style
import pandas as pd
from datetime import datetime
import pytz
from PIL import Image, ImageDraw, ImageFont
import os

font_path = "C:/Windows/Fonts/arialbd.ttf"  # Path to Arial Bold font (Windows)

def process_file():
    file_path = filedialog.askopenfilename(
        filetypes=[("Excel Files", "*.xlsx"), ("All Files", "*.*")]
    )
    if not file_path:
        messagebox.showerror("Error", "No file selected. Please upload an Excel file.")
        return

    try:
        output_files = generate_order_report(file_path)
        messagebox.showinfo("Success", f"Reports generated successfully: {', '.join(output_files)}")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {str(e)}")

def generate_order_report(file_path):
    data = pd.read_excel(file_path)

    # (Sri Lanka timezone)
    sri_lanka_tz = pytz.timezone("Asia/Colombo")
    today = datetime.now(sri_lanka_tz).strftime("%d.%m.%Y")  # DD.MM.YYYY format
    try:
        data.iloc[:, 11] = pd.to_datetime(data.iloc[:, 11], format="%m/%d/%Y", errors="coerce").dt.strftime("%m/%d/%Y")
    except Exception as e:
        raise ValueError("Could not parse the 'Required Date' column. Ensure all values are in MM/DD/YYYY format.")

    if today not in data.iloc[:, 11].unique():
        raise ValueError("No data found for today's date. Ensure the file has at least one row with today's date.")

    # Filter data for today's date
    today_data = data[data.iloc[:, 11] == today]

    restaurants = today_data.iloc[:, 7].unique()

    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    folder_name = f"Order Reports {today}"
    reports_folder = os.path.join(desktop_path, folder_name)
    os.makedirs(reports_folder, exist_ok=True)

    output_files = []

    for restaurant in restaurants:
        restaurant_data = today_data[today_data.iloc[:, 7] == restaurant]

        menu_column = 8 if restaurant == "Acropol" else 9

        food_counts = restaurant_data.iloc[:, menu_column].value_counts().reset_index()
        food_counts.columns = ["Menu", "Count"]

        food_counts.loc[len(food_counts)] = ["Grand Total", food_counts["Count"].sum()]

 

        output_file = os.path.join(reports_folder, f"{restaurant}_Orders_{today.replace('.', '-')}.jpeg")
        save_to_image(food_counts, output_file, restaurant, today)
        output_files.append(output_file)

    return output_files

def save_to_image(dataframe, output_path, restaurant_name, today):
    header_font_size = 50  # Increased size
    font_size = 45  # Increased size
    bold_font_size = 50  # Increased size

    # Fonts
    font_header = ImageFont.truetype(font_path, header_font_size)
    font_regular = ImageFont.truetype(font_path, font_size)
    font_bold = ImageFont.truetype(font_path, bold_font_size)

    col_widths = [
        int(max(
            font_regular.getlength(str(value)) for value in dataframe[col_name]
        ) + 80)  # Increased padding to ensure all columns fit
        for col_name in dataframe.columns
    ]

    count_column_idx = dataframe.columns.get_loc("Count")
    col_widths[count_column_idx] = max(col_widths[count_column_idx], int(font_regular.getlength("Count") + 80))

    row_height = 90  # Increased height for better spacing
    padding = 30  # Increased padding for better spacing
s
    image_width = sum(col_widths) + padding * 2
    image_height = row_height * (len(dataframe) + 3) + padding * 2
    img = Image.new("RGB", (image_width, image_height), color="white")
    draw = ImageDraw.Draw(img)

    header_text = f"{restaurant_name} Orders - {today}"
    draw.text((padding, padding), header_text, fill="black", font=font_header)

    y_offset = row_height + padding
    x_offset = padding
    for col_idx, col_name in enumerate(dataframe.columns):
        draw.text((x_offset, y_offset), col_name, fill="black", font=font_bold)
        x_offset += col_widths[col_idx]
    y_offset += row_height
    for row_idx, row in dataframe.iterrows():
        x_offset = padding
        for col_idx, value in enumerate(row):
            current_font = font_bold if row_idx == len(dataframe) - 1 else font_regular
            draw.text((x_offset, y_offset), str(value), fill="black", font=current_font)
            x_offset += col_widths[col_idx]
        y_offset += row_height
    img.save(output_path)

def create_gui():
    root = tk.Tk()
    root.title("Food Order Report Generator")
    root.geometry("500x300")
    root.configure(bg="#FFA500")  # Orange hue

    style = Style()
    style.configure("TLabel", font=("Helvetica", 14), background="#FFA500", foreground="white")
    style.configure("TButton", font=("Helvetica", 12), background="#FFB347")
    header = Label(root, text="Food Order Report Generator", style="TLabel")
    header.pack(pady=20)
    instructions = Label(root, text="Upload your Excel file to generate reports", style="TLabel")
    instructions.pack(pady=10)
    upload_button = Button(root, text="Upload", command=process_file)
    upload_button.pack(pady=20)
    footer = Label(root, text="Powered by Tkinter", style="TLabel", font=("Helvetica", 10))
    footer.pack(side=tk.BOTTOM, pady=10)

    root.mainloop()

if __name__ == "__main__":
    create_gui()
